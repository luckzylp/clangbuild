name: Build and Release Static libclang (Alpine)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Optional: Git ref (tag or commit) of LLVM to build"
        required: false
        default: ""

jobs:
  get-llvm-tag:
    runs-on: ubuntu-latest
    outputs:
      llvm_tag: ${{ steps.determine_ref.outputs.llvm_ref }}
      clang_version: ${{ steps.determine_ref.outputs.clang_version }}
      commit_sha: ${{ steps.get_sha.outputs.commit_sha }}
    steps:
      - name: Determine LLVM ref
        id: determine_ref
        run: |
          # Use custom ref if provided, otherwise fetch latest stable tag
          if [ -n "${{ github.event.inputs.ref }}" ]; then
            LLVM_REF="${{ github.event.inputs.ref }}"
            echo "Using custom ref: $LLVM_REF"
          else
            # Fetch latest stable LLVM release tag
            LATEST_TAG=$(git ls-remote --tags --refs --sort=-v:refname https://github.com/llvm/llvm-project.git | \
                         grep -Eo 'refs/tags/llvmorg-[0-9.]+$' | sort -V | tail -n1 | sed 's/refs\/tags\///')
            LLVM_REF=$LATEST_TAG
            echo "Using latest tag: $LATEST_TAG"
          fi

          # Extract clang version (remove llvmorg- prefix)
          CLANG_VERSION=$(echo $LLVM_REF | sed 's/llvmorg-//')
          echo "llvm_ref=$LLVM_REF" >> $GITHUB_OUTPUT
          echo "clang_version=$CLANG_VERSION" >> $GITHUB_OUTPUT

      # Add step to get commit SHA
      - name: Get commit SHA
        id: get_sha
        run: |
          if [ -n "${{ github.event.inputs.ref }}" ]; then
            # If custom ref, get its SHA
            COMMIT_SHA=$(git ls-remote https://github.com/llvm/llvm-project.git "${{ github.event.inputs.ref }}" | cut -f1)
          else
            # Use SHA of the latest tag
            COMMIT_SHA=$(git ls-remote --tags --refs --sort=-v:refname https://github.com/llvm/llvm-project.git | \
                         grep -E 'refs/tags/llvmorg-[0-9.]+$' | sort -V | tail -n1 | cut -f1)
          fi
          # Remove any line breaks from the SHA
          COMMIT_SHA=$(echo $COMMIT_SHA | tr -d '\n')
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

  build-static-clang:
    needs: get-llvm-tag
    # Use Alpine container running on Ubuntu host
    runs-on: ubuntu-latest
    container:
      image: alpine:3.19
    env:
      INSTALL_PREFIX: /llvm-install
      PLATFORM: x86_64
      VERSION: ${{ needs.get-llvm-tag.outputs.clang_version }}

    steps:
      # Install Alpine build dependencies (without zlib)
      - name: Install Alpine build dependencies
        run: |
          apk update
          apk add --no-cache \
            build-base \
            cmake \
            ninja \
            git \
            python3 \
            linux-headers \
            curl \
            musl-dev \
            libc-dev \
            binutils \
            file \
            pkgconf \
            wget

      # Checkout LLVM source code from GitHub
      - name: Checkout LLVM source
        run: |
          LLVM_REF="${{ needs.get-llvm-tag.outputs.llvm_tag }}"

          # Clone specific tag/branch
          if ! git clone --depth 1 --branch $LLVM_REF https://github.com/llvm/llvm-project.git; then
            # Fallback to full clone + checkout for commits
            echo "Cloning full repository (ref may be a commit)"
            git clone https://github.com/llvm/llvm-project.git
            cd llvm-project
            git checkout $LLVM_REF
            cd ..
          fi

      # Build static zlib from source to ensure complete static linking
      - name: Build static zlib
        run: |
          # Define zlib version to build (known compatible version)
          ZLIB_VERSION="1.3.1"

          # Download zlib source code
          wget https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz

          # Extract source archive
          tar xvf zlib-${ZLIB_VERSION}.tar.gz
          cd zlib-${ZLIB_VERSION}

          # Configure build for static library only
          # --static: Build static library
          # --prefix: Set installation directory
          ./configure --static --prefix=/zlib-install

          # Build with all available CPU cores
          make -j$(nproc)

          # Install to /zlib-install
          make install
          cd ..

          # Set environment variables for CMake configuration
          echo "ZLIB_ROOT=/zlib-install" >> $GITHUB_ENV
          echo "ZLIB_LIBRARY=/zlib-install/lib/libz.a" >> $GITHUB_ENV
          echo "ZLIB_INCLUDE_DIR=/zlib-install/include" >> $GITHUB_ENV
          echo "CUSTOM_ZLIB=1" >> $GITHUB_ENV

      # Configure build environment variables
      - name: Configure build environment
        run: |
          # Set linker flags for static linking
          # -static: Create fully static executable
          # -Wl,--as-needed: Only link libraries that are actually used
          export LDFLAGS="-static -Wl,--as-needed"
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV

          # Set compiler flags for static linking
          export CXXFLAGS="-static"
          echo "CXXFLAGS=$CXXFLAGS" >> $GITHUB_ENV

      # Configure LLVM build with custom static zlib
      - name: Configure LLVM build
        run: |
          # Create build directory
          mkdir llvm-build
          cd llvm-build

          # Generate build files with CMake
          cmake -G Ninja ../llvm-project/llvm \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="clang" \
            -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
            -DBUILD_SHARED_LIBS=OFF \
            -DLLVM_BUILD_LLVM_DYLIB=OFF \
            -DCLANG_LINK_CLANG_DYLIB=OFF \
            -DLLVM_ENABLE_PIC=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_ENABLE_ZLIB=FORCE_ON \
            -DZLIB_INCLUDE_DIR=$ZLIB_INCLUDE_DIR \
            -DZLIB_LIBRARY=$ZLIB_LIBRARY \
            -DZLIB_USE_STATIC_LIBS=ON \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_ENABLE_FFI=OFF \
            -DLLVM_ENABLE_LIBEDIT=OFF \
            -DLLVM_ENABLE_LIBPFM=OFF \
            -DLLVM_ENABLE_ASSERTIONS=OFF \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DCMAKE_AR=/usr/bin/ar \
            -DCMAKE_RANLIB=/usr/bin/ranlib

      # Build and install the LLVM/clang components
      - name: Build and install
        run: |
          cd llvm-build
          # Build with all available CPU cores
          ninja -j$(nproc) install

      # Verify generated binaries are truly static
      - name: Verify static binaries
        run: |
          # Check clang binary is statically linked
          if ! file $INSTALL_PREFIX/bin/clang | grep -q "statically linked"; then
            echo "ERROR: clang is not statically linked!"
            file $INSTALL_PREFIX/bin/clang
            exit 1
          fi

          # Check clang++ binary is statically linked
          if ! file $INSTALL_PREFIX/bin/clang++ | grep -q "statically linked"; then
            echo "ERROR: clang++ is not statically linked!"
            file $INSTALL_PREFIX/bin/clang++
            exit 1
          fi

          # Verify binary has no dynamic dependencies
          if ! ldd $INSTALL_PREFIX/bin/clang 2>&1 | grep -q "not a dynamic executable"; then
            echo "ERROR: Binary is not fully static!"
            ldd $INSTALL_PREFIX/bin/clang
            exit 1
          fi

          echo "Verification passed: Binaries are fully static"

      # Package artifacts
      - name: Package artifacts
        run: |
          # Use requested package name format: static-libclang-v{VERSION}-musl-{PLATFORM}
          PACKAGE_NAME="static-libclang-v${VERSION}-musl-${PLATFORM}.tar.gz"
          tar -czvf ${PACKAGE_NAME} -C ${INSTALL_PREFIX} .

          # Prepare artifacts directory
          mkdir -p artifacts
          mv ${PACKAGE_NAME} artifacts/
          echo "Created package: ${PACKAGE_NAME}"

      # Upload artifacts for later release
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: static-clang-alpine
          path: artifacts/*.tar.gz

  # Create GitHub release for the package
  create-release:
    needs: [get-llvm-tag, build-static-clang]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Checkout current repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configure git user for release operations
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Download build artifacts from previous step
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: static-clang-alpine
          path: artifacts

      # Install GitHub CLI for release management
      - name: Setup GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # Authenticate GitHub CLI using workflow token
      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      # Create and push tag for the release
      - name: Create tag and push
        run: |
          VERSION="${{ needs.get-llvm-tag.outputs.clang_version }}"
          RELEASE_TAG="v$VERSION-static-alpine"
          COMMIT_SHA="${{ needs.get-llvm-tag.outputs.commit_sha }}"

          # Create and push tag if it doesn't exist
          if ! git rev-parse $RELEASE_TAG >/dev/null 2>&1; then
            echo "Creating tag $RELEASE_TAG pointing to $COMMIT_SHA"
            git tag $RELEASE_TAG $COMMIT_SHA
            git push origin $RELEASE_TAG
          fi

      # Create GitHub release with release notes
      - name: Create release
        run: |
          VERSION="${{ needs.get-llvm-tag.outputs.clang_version }}"
          RELEASE_TAG="v$VERSION-static-alpine"

          # Generate release notes with build details
          {
            echo "# Static libclang ${{ needs.get-llvm-tag.outputs.clang_version }} (musl)"
            echo ""
            echo "**Build Details:**"
            echo "- LLVM Version: ${{ needs.get-llvm-tag.outputs.llvm_tag }}"
            echo "- Platform: x86_64 Linux"
            echo "- Build Environment: Alpine Linux (musl)"
            echo "- Binary Type: Fully static (except Linux kernel)"
            echo ""
            echo "**Notes:**"
            echo "- Built in Alpine container for pure static linking"
            echo "- Contains clang and clang++ binaries"
            echo "- Package name: static-libclang-v${VERSION}-musl-x86_64.tar.gz"
          } > release_notes.md

          # Create release or update if exists
          if gh release view $RELEASE_TAG >/dev/null 2>&1; then
            echo "Release $RELEASE_TAG already exists, updating..."
            gh release delete $RELEASE_TAG -y --cleanup-tag
          fi

          # Create new release with package
          gh release create "$RELEASE_TAG" \
            artifacts/*.tar.gz \
            --title "Static libclang ${{ needs.get-llvm-tag.outputs.clang_version }} (musl)" \
            --notes-file release_notes.md

      # Verify release was created successfully
      - name: Verify Release
        run: |
          VERSION="${{ needs.get-llvm-tag.outputs.clang_version }}"
          RELEASE_TAG="v$VERSION-static-alpine"
          gh release view $RELEASE_TAG
